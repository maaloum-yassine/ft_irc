Option SO_REUSEADDR en détail
L'option SO_REUSEADDR est une option de socket qui permet à plusieurs sockets TCP (ou UDP) sur un même système d'exploitation d'utiliser la même adresse locale sous certaines conditions. Voici les points clés à retenir :

Réutilisation rapide d'une adresse locale :

Lorsqu'un socket se ferme, l'adresse et le port utilisés par ce socket restent réservés (ou liés) pendant un certain temps (habituellement quelques minutes) avant d'être réutilisables par un nouveau socket.
L'option SO_REUSEADDR permet de contourner cette restriction, en permettant à un nouveau socket d'utiliser immédiatement la même adresse locale que le socket précédent qui vient de se fermer.
Utilisation appropriée :

SO_REUSEADDR est souvent utilisé dans des applications serveur qui doivent redémarrer rapidement après une interruption, ou qui doivent lier plusieurs sockets à la même adresse et au même port (par exemple, dans des applications de serveur multi-thread ou multi-processus).
Conditions d'utilisation :

Cette option peut être définie avant d'appeler bind() sur un socket TCP ou UDP.
Elle ne doit être activée que lorsque vous êtes certain que plusieurs sockets sur le même système d'exploitation peuvent écouter la même adresse IP et le même port simultanément.
https://irc.dalexhd.dev/








Les sockets jouent un rôle crucial dans la communication réseau. Voici un aperçu de leur rôle et comment ils sont utilisés en C++ :

Qu'est-ce qu'un socket ?
Un socket est un point de communication entre deux machines sur un réseau. Il permet d'envoyer et de recevoir des données à travers un réseau comme l'Internet.

Types de sockets
Sockets de domaine Internet (AF_INET) : Utilisés pour la communication sur Internet.
Sockets de domaine Unix (AF_UNIX) : Utilisés pour la communication inter-processus sur la même machine.
Utilisation des sockets en C++
Voici les étapes générales pour utiliser les sockets en C++ :

Créer un socket
Lier le socket à une adresse et un port
Écouter les connexions entrantes (serveur)
Accepter une connexion (serveur)
Envoyer et recevoir des données
Fermer le socket
Exemple de code
Voici un exemple simple d'un serveur et d'un client en C++ utilisant les sockets.

Serveur
cpp
Copier le code
#include <iostream>
#include <cstring>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};

    // Créer le socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Attacher le socket au port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    read(new_socket, buffer, 1024);
    std::cout << "Message reçu: " << buffer << std::endl;
    const char *response = "Hello from server";
    send(new_socket, response, strlen(response), 0);
    std::cout << "Message envoyé\n";

    close(new_socket);
    close(server_fd);

    return 0;
}
Client
cpp
Copier le code
#include <iostream>
#include <cstring>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        std::cerr << "Socket creation error\n";
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(8080);

    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        std::cerr << "Invalid address/ Address not supported\n";
        return -1;
    }

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        std::cerr << "Connection Failed\n";
        return -1;
    }

    const char *message = "Hello from client";
    send(sock, message, strlen(message), 0);
    std::cout << "Message envoyé\n";
    read(sock, buffer, 1024);
    std::cout << "Message reçu: " << buffer << std::endl;

    close(sock);

    return 0;
}
Explications
Serveur :

Crée un socket avec socket().
Configure les options de socket avec setsockopt().
Lie le socket à une adresse et un port avec bind().
Écoute les connexions entrantes avec listen().
Accepte une connexion avec accept().
Lit les données envoyées par le client avec read().
Envoie une réponse au client avec send().
Ferme le socket avec close().
Client :

Crée un socket avec socket().
Configure l'adresse du serveur avec inet_pton().
Établit une connexion au serveur avec connect().
Envoie un message au serveur avec send().
Lit la réponse du serveur avec read().
Ferme le socket avec close().
J'espère que cela répond à ta question. Si tu as besoin de plus de détails ou d'exemples spécifiques, n'hésite pas à demander !












Ports Réservés (0-1023)
Ces ports sont réservés par l'Internet Assigned Numbers Authority (IANA) pour des services ou protocoles spécifiques qui sont couramment utilisés sur les réseaux. Ces services sont essentiels pour la communication réseau et sont souvent utilisés par les systèmes d'exploitation et les applications.

Exemples de Ports Réservés
Port 20 et 21 : FTP (File Transfer Protocol) - Utilisé pour le transfert de fichiers.
Port 22 : SSH (Secure Shell) - Utilisé pour des connexions sécurisées à distance.
Port 23 : Telnet - Utilisé pour des connexions à distance non sécurisées (moins utilisé aujourd'hui en raison de problèmes de sécurité).
Port 25 : SMTP (Simple Mail Transfer Protocol) - Utilisé pour l'envoi de courriels.
Port 53 : DNS (Domain Name System) - Utilisé pour la résolution de noms de domaine.
Port 80 : HTTP (HyperText Transfer Protocol) - Utilisé pour le trafic web non sécurisé.
Port 110 : POP3 (Post Office Protocol version 3) - Utilisé pour la récupération des courriels.
Port 143 : IMAP (Internet Message Access Protocol) - Utilisé pour la récupération et la gestion des courriels.
Port 443 : HTTPS (HyperText Transfer Protocol Secure) - Utilisé pour le trafic web sécurisé.
Pourquoi les Ports Réservés sont-ils Importants ?
Standardisation : Ils permettent une standardisation des services, ce qui signifie que les administrateurs et les développeurs savent quels ports utiliser pour quels services.
Sécurité : En réservant ces ports pour des services spécifiques, il est plus facile de configurer des pare-feu et autres mesures de sécurité.
Compatibilité : Les applications et les systèmes d'exploitation peuvent s'attendre à ce que ces services soient disponibles sur ces ports, ce qui facilite l'interopérabilité.
Utilisation des Ports Réservés
Serveurs : Typiquement, les serveurs écoutent sur ces ports pour fournir des services aux clients. Par exemple, un serveur web écoutera sur le port 80 pour HTTP et sur le port 443 pour HTTPS.
Clients : Les clients se connectent à ces ports pour accéder aux services. Par exemple, un navigateur web se connectera au port 80 pour accéder à un site web via HTTP.
Ports Non Réservés
Ports enregistrés (1024-49151) : Ces ports sont également attribués par l'IANA pour des services moins courants ou des applications spécifiques.
Ports dynamiques/privés (49152-65535) : Utilisés généralement pour des connexions temporaires ou des communications entre applications locales.
Conclusion
Les ports de 0 à 1023 sont réservés pour des services bien connus qui sont essentiels pour le fonctionnement de nombreux protocoles et applications réseau. Cela permet une communication standardisée et sécurisée sur les réseaux.



configure la socket pour permettre la réutilisation d'adresses locales, ce qui est particulièrement utile pour les serveurs afin d'éviter les problèmes lorsque vous redémarrez le serveur ou lorsque vous avez plusieurs processus écoutant sur le même port.





	_serv_socket_fd = socket(AF_INET, SOCK_STREAM, 0);
		/*AF_INET==> protocole TCP/IP (IPv4)*/
		/*SOCK_STREAM==> mode connecter type transport*/
		/*
			type = 0  system choisir le protocole
			IPPROTO_TCP --> pour le tcp ( AF_INET + SOCK_STREAM = IPPROTO_TCP )
			IPPROTO_UDP -->  pour le udp ( AF_INET + SOCK_DGRAM = IPPROTO_UDP )
		*/
// void server :: 	disconnection_client(int fd)
	// {
	// 	client* __client = NULL;

	// 	__client = this->_client.at(fd);
	// 	this->_client.erase(fd);
	// 	if (__client)
	// 	{
	// 		for (pllfd_itertr it = this->_fds.begin(); it != this->_fds.end(); ++it)
	// 		{
	// 			if (it->fd == fd)
	// 			{
	// 				this->_fds.erase(it);
	// 				close(fd);
	// 				break ;
	// 			}
	// 		}
	// 		std :: cout << "Client --> " << __client->get_hostname() << " is desconnected" << std :: endl;
	// 		delete __client;
	// 	}
	// }
// https://www.youtube.com/watch?v=CHNxGKs26qQ
